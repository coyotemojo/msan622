scatter
#order the genre factor by frequency so bar chart is sorted
movies <- transform(movies, genre = ordered(genre,
levels = names(sort(table(movies$genre), decreasing=TRUE))))
bar <- ggplot(movies, aes(x=genre)) +
geom_bar(colour='black', fill = '#FF9999',stat='bin') +
xlab('Genre') +
ylab('Count') +
scale_y_continuous(labels=comma)
ggtitle('Frequency of Movies by Genre')
bar
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(size=1,labels=dollar)
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(size=1,labels=dollar)
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(labels=dollar)
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(labels=dollar())
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(labels=dollar(budget, 2))
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(labels=dollar(budget))
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(labels=dollar(movies$budget))
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(labels=dollar)
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
scale_x_continuous(labels=dollar)
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre) +
facet_plot
facet_plot <- scatter +
facet_wrap(~ genre)
facet_plot
str(eu)
head(eu)
data(EuStockMarkets)
head(eu)
str(eu)
head(EuStockMarkets)
?time
View(eu)
View(eu)
head(ue)
head(eu)
library(reshape)
eu_melted <- melt(eu)
eu_melted
head(eu_melted)
tail(eu_melted)
str(eu)
eu_melted <- melt(eu, id='time', measured=c('DAX', 'SMI', 'CAC', 'FTSE'))
eu_melted <- melt(eu, id='time', measured=c('DAX', 'SMI', 'CAC', 'FTSE'))
eu_melted <- melt(eu, id='time')#, measured=c('DAX', 'SMI', 'CAC', 'FTSE'))
eu_melted <- melt(eu, measured=c('DAX', 'SMI', 'CAC', 'FTSE'))
head(eu_melted)
tail(eu_melted)
str(eu)
summary(eu)
eu_melted <- melt(eu, id=as.numeric('time'),(measured=c('DAX', 'SMI', 'CAC', 'FTSE'))
)
as.numeric(eu$time)
head(eu_melted)
tail(eu_melted)
eu_melted <- melt(eu, id='time')
library(reshape2)
eu_melted <- melt(eu, id='time')
eu_melted <- melt(eu, id=c('time'))
pca$loadings[,2]
```
d <- read.table('~/Dropbox/HamrickDataSets/CrossSectionalRegression/TrackbyCountry/TrackbyCountryData.txt')
colnames(d) <- c('m100', 'm200', 'm400', 'm800', 'm1500', 'm5000', 'm10000', 'marathon', 'country')
scaled <- scale(d[,-9])
pca <- princomp(scaled, cor=TRUE)
summary(pca)
#1a: The first two principal components explain close to 94% of the total variation in the data.
sum(pca$sdev^2)
#1b: The sum of the eigenvalues is equal to the sum of the squares of the standard deviations of the new components.  In this case, the sum is indeed 8, the number of dimensions in the original dataset.
plot(pca)
#1c: The scree plot suggests that two principal components are appropriate.
pca$sdev ^ 2
# 1d:Only the first eigenvalue is greater than 1, so using this heuristic would result in a single principal component.
pca$loadings[,1]
pca$loadings[,2]
sum(pca$loadings[,1] ^ 2)
#1f: The sum of the first squared factor loading is indeed 1.
maxc1 <- which(pca$scores[,1] == max(pca$scores[,1]))
minc1 <- which(pca$scores[,1] == min(pca$scores[,1]))
maxc2 <- which(pca$scores[,2] == max(pca$scores[,2]))
minc2 <- which(pca$scores[,2] == min(pca$scores[,2]))
desc <- c('max comp 1', 'min comp 1', 'max comp 2', 'min comp 2')
country <- c(as.character(d[maxc1, 9]),
as.character(d[minc1, 9]),
as.character(d[maxc2, 9]),
as.character(d[minc2, 9]))
comp_1 <- c(pca$scores[maxc1,1],
pca$scores[minc1,1],
pca$scores[maxc2,1],
pca$scores[minc2,1])
comp_2 <- c(pca$scores[maxc1,2],
pca$scores[minc1,2],
pca$scores[maxc2,2],
pca$scores[minc2,2])
extremes <- data.frame(desc, country, comp_1, comp_2)
extremes
d <- read.csv('~/Dropbox/HamrickDataSets/MultivariateStatisticalAnalysis/CorrelationMatrixEightBodyMeasurements/CorrelationMatrixBodyMeasurements.csv', header=FALSE)
#Using `eigen` since we are only provided with a correlation matrix:
mypca <- eigen(d)
mypca
plot(mypca$values)
d <- read.csv('~/Dropbox/HamrickDataSets/MultivariateStatisticalAnalysis/CorrelationMatrixEightBodyMeasurements/CorrelationMatrixBodyMeasurements.csv', header=FALSE)
#Using `eigen` since we are only provided with a correlation matrix:
mypca <- eigen(d)
mypca
plot(mypca$values)
#2a: I would say that utilizing only the first 3 principal components would be a reasonable choice.
#2b: The first component essentially seems to be an average of all 8 variables.
#The second component appears to measure the difference between the values of the first 4 variables and the last 4 variables.
#The third component is almost entirely composed of the 8th variable.
mypca
mypca$vectors
mypca$vectors
mypca$vectors[,1:3]
apply(mypca$vectors[,1:3], 1, x**2)
apply(mypca$vectors[,1:3], 1, function(x) {x**2})
mypca$vectors[,1]
mypca$vectors[1,1:3]
mypca$vectors[1,1:3] ^ 2
.158^2
.397^2
sum(mypca$vectors[1,1:3] ^ 2)
mypca$vectors[1:2,1:3] ^ 2
mypca$vectors[,1:3] ^ 2
.31^2
apply(mypca$vectors[,1:3] ^ 2, 1, sum)
mypca$vectors[,1:3]
(mypca$vectors[,1:3] ^ 2, 1, sum)
apply(mypca$vectors[,1:3] ^ 2, 1, sum)
communality <- apply(mypca$vectors[,1:3] ^ 2, 1, sum)
communality
uniqueness <- 1 - communality
uniqueness
.85 ^ 2
library(gdata)
d <- read.xls('~/Dropbox/HamrickDataSets/MultivariateStatisticalAnalysis/MeasurementsTwentyFivePrehistoricGobletsThailand/MeasurementsPrehistoricGobletsThailand.xlsx', header=TRUE)
#remove id #
d <- d[,-1]
#look at documentation to fully answer this question
d$total <- apply(d, 1, sum)
plot(d/d$total)
pca <- princomp(d[,-8], scale = TRUE)
summary(pca)
plot(pca)
pca
summary(pca)
attributes(pca)
pca$sdev
pca$loadings
# The loadings shed some light on the formulation of the principal components for the dataset.  The first component is nearly an average across all of the measurements, but the HT (height) measurement is by far the most heavily loaded in the component.  So the height of the goblet says quite a bit about the rest of its shape.  This is further evidenced by the loadings on the second component, which appears to be expressing the contrast between the height of the goblet (as measured by both the HT and HG variables) and the rest of the measurements.  It's likely that there are two main shapes - short and wide and tall and skinny, so the height variables is of major imoportance to describing the likely shape of the goblet.
pca$loadings
```{r}
```{r}
d <- read.table('~/Dropbox/HamrickDataSets/CrossSectionalRegression/MicrosoftFactorData/MicrosoftFactorData.txt', header=TRUE, sep='\t')
d <- d[,6:11]
mypca <- princomp(d, scale=TRUE)
plot(mypca)
cumsum(mypca$sdev)/sum(mypca$sdev)
mypca
mypca
mypca$values
attributes(mypca)
mypca$sdev
mypca$loadings
#The loadings shed light on the most important aspects of the data - namely, that the first component is essentially an average of the interest rates across the entire yield curve.  The second component appears to be reflecting the differential between rates on the short-term end of the yield curve vs. rates on the long-term end of the yield curve.  Finally, the third component, with positive loadings on the 3 Month and 10 Year Treasury and negative loadings on the middle two notes, the 1 Year and 3 Year Treasuries, is almost a measure of the convexity of the yield curve.
sig <- matrix(c(5,2,2,2), byrow=TRUE, nrow=2)
pca <- princomp(cov=sig)
pca$loadings
summary(pca)
sig
sig <- matrix(c(5,2,2,2), byrow=TRUE, nrow=2)
sig_cor <- cov2cor(sig)
sig_cor
eigs <- eigen(sig_cor)
eigs$vectors
cumsum(eigs$values)/sum(eigs$values)
# The loadings are:
eigs$vectors
# The first principal component accounts for almost 82% of the variation:
cumsum(eigs$values)/sum(eigs$values)
eigs
sum(eigs$values)
pca
summary(pca)
pca$sdev
pca$sdev ^ 2
sum(pca$sdev ^ 2)
sum(pca$sdev ^ 2)
eigs
.707 * (1.63 ^ .5)
.707 * (1.63 ^ .5)
.707 * (.37 ^ .5)
eigs
.707 * (.37 ^ .5)
$\rho_{Y_1,Z_1} = e_{11} \cdot \sqrt\lambda_1 = .707 \cdot \sqrt{1.63} = .903$
mat <- matrix(c(2,0,0,0,4,0,0,0,4), nrow=3, byrow=TRUE)
eigen(mat)
mus <- c(62309, 2927)
sig <- matrix(c(10005.20, 255.76, 255.76, 14.30, nrow=2, byrow=TRUE))
sig
sig <- matrix(c(10005.20, 255.76, 255.76, 14.30), nrow=2, byrow=TRUE))
sig <- matrix(c(10005.20, 255.76, 255.76, 14.30), nrow=2, byrow=TRUE)
sig
princomp(sig)
eigen(sig)
summary(princomp(sig))
sig
pca <- princomp(cov=sig)
pca
eigen(sig)
summary(pca)
pca$sdev
pca$sdev ^2
pca$loadings
pca
attributes(pca)
pca$loadings
pca$sca;e
pca$scale
cov2cor(sig)
eigen(cov2cor(sig))
pca <- princomp(cov=sig)
pca
print(pca)
sig
pca$loadings ^ 2
pca$sdev ^ 2
cov2cor(sig)
test <- matrix(c(3.397, -1.102, 4.306, -2.078, .027, -1.102, 9.673, -1.513, 10.953, 1.203, 4.306, -1.513, 55.626, -28.937, -.044, -2.078, 10.953, -28.937, 89.067, .957, .027, 1.203, -.044, .957, .319), nrow=5, byrow=TRUE)
test
eigen(test)
eigen(sig)
pca
pca$loadings
pca <- eigen(sig)
pca
pca$vectors
pca$values
cumsum(pca$values)
cumsum(pca$values)/(sum(pca$values))
pca
#8b: The first component accounts for over 99.9% of the variation in the data:
cumsum(pca$values)/(sum(pca$values))
pca$vectors[1,1]
pca$vectors[1,1] * pca$values[1]
pca$vectors[1,1] * (pca$values[1] ^ .5)
sig
pca$vectors[1,1] * (pca$values[1] ^ .5) / sig[1,1] ^ .5
rhoy1xa <- pca$vectors[1,1] * (pca$values[1] ^ .5) / sig[1,1] ^ .5
rhoy1xb <- pca$vectors[2,1] * (pca$values[2] ^ .5) / sig[2,2] ^ .5
d <- read.csv('Dropbox/HamrickDataSets/MultivariateStatisticalAnalysis/BartlettTest/BartlettTest.csv)
d <- read.csv('Dropbox/HamrickDataSets/MultivariateStatisticalAnalysis/BartlettTest/BartlettTest.csv')
d <- read.csv('Dropbox/HamrickDataSets/MultivariateStatisticalAnalysis/BartlettTest/BartlettTest.csv')
head(d)
d <- read.csv('Dropbox/HamrickDataSets/MultivariateStatisticalAnalysis/BartlettTest/BartlettTest.csv', header=FALSE)
head(d)
scor <- cor(d)
scor
?bartlett.test
bartlett.test(d)
bartlett.test(scor)
d
melt(d)
library(reshape)
melt(d)
library(reshape)
d_melted <- melt(d)
head(d_melted)
bartlett.test(variable~value, d_melted)
bartlett.test(valuw~variable, d_melted)
bartlett.test(value~variable, d_melted)
bartlett.test(d)
btest <- bartlett.test(d)
btest
summary(btest)
btest
eigen(scor)
plot(d)
summary(d)
scor
?bartlett.test
bartlett.test(V1, V2, V3, V4)
with(d, bartlett.test(V1, V2, V3, V4))
?with
with(d, bartlett.test(d$V1, d$V2, d$V3, d$V4))
d
with(d, bartlett.test(list(V1, V2, V3, V4)))
with(d, bartlett.test(list(V1, V2, V3, V4)))
with(d, bartlett.test(d$V1, d$V2, d$V3, d$V4))
with(d, bartlett.test(list(V1, V2, V3, V4)))
d
d2 <- d
d2[1,1] <- 100
eigen(cov(d))
eigen(cov(d2))
d2 <- d
d2[1,1] <- 10
eigen(cov(d))
eigen(cov(d2))
summary(d)
var(d)
bartlett.test(list(d$V1, d$V3))
bartlett.test(d$V1, d$V3)
bartlett.test(list(d$V1, d$V3))
?bartlett.test
summary(d)
ggplot(d) + geom_box()
library(ggplot2)
ggplot(d) + geom_box()
ggplot(d) + geom_boxplot()
library(psych)
?cortest.bartlett
cortest.bartlett(d)
d
cor(d)
cortest.bartlett(cor(d))
cortest.bartlett(cor(d), n=NULL)
cortest.bartlett(cor(d))
btest <- cortest.bartlett(scor)
btest
clear
clear9)
clear()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
setwd('Documents/msan/classes/data_visualization/msan622/homework3/')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
runApp()
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
region_palette <- brewer_pal(palette='Dark2')(4)
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
region_palette <- brewer_pal(palette='Dark2')(4)
region_palette
levels(state_data$Region)
levels(globalData$Region)
region_palette <- ("Northeast" = "#1B9E77", "South" = "#D95F02", "North Central" = "#7570B3", "West" = "#E7298A")
region_palette <- c("Northeast" = "#1B9E77", "South" = "#D95F02", "North Central" = "#7570B3", "West" = "#E7298A")
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
region_palette <- c("Northeast" = "#1B9E77", "South" = "#D95F02", "North Central" = "#7570B3", "West" = "#E7298A")
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
str(globalData)
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
str(globalData)
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
runApp()
library(shiny)
shiny::runGitHub('msan622', 'coyotemojo', subdir='homework3')
library(shiny)
shiny::runGitHub('msan622', 'coyotemojo', subdir='homework3')
library(shiny)
shiny::runGitHub('msan622', 'coyotemojo', subdir='homework3')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
shiny::runGitHub('lectures', 'msan622', subdir='multivariatedata/heatmap')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/ui.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
source('~/Documents/msan/classes/data_visualization/msan622/homework3/server.r')
runApp()
runApp()
shiny::runGitHub('msan622', 'coyotemojo', 'homework3')
shiny::runGitHub('msan622', 'coyotemojo', subdir='homework3')
shiny::runGitHub('msan622', 'coyotemojo', subdir='homework3')
